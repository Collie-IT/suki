var sortable=function(){"use strict";function e(e,t,n){if(void 0===n)return e&&e.h5s&&e.h5s.data&&e.h5s.data[t];e.h5s=e.h5s||{},e.h5s.data=e.h5s.data||{},e.h5s.data[t]=n}var t=function(e,t){if(!(e instanceof NodeList||e instanceof HTMLCollection||e instanceof Array))throw new Error("You must provide a nodeList/HTMLCollection/Array of elements to be filtered.");return"string"!=typeof t?Array.from(e):Array.from(e).filter((function(e){return 1===e.nodeType&&e.matches(t)}))},n=new Map,r=function(){function e(){this._config=new Map,this._placeholder=void 0,this._data=new Map}return Object.defineProperty(e.prototype,"config",{get:function(){var e={};return this._config.forEach((function(t,n){e[n]=t})),e},set:function(e){if("object"!=typeof e)throw new Error("You must provide a valid configuration object to the config setter.");var t=Object.assign({},e);this._config=new Map(Object.entries(t))},enumerable:!1,configurable:!0}),e.prototype.setConfig=function(e,t){if(!this._config.has(e))throw new Error("Trying to set invalid configuration item: "+e);this._config.set(e,t)},e.prototype.getConfig=function(e){if(!this._config.has(e))throw new Error("Invalid configuration item requested: "+e);return this._config.get(e)},Object.defineProperty(e.prototype,"placeholder",{get:function(){return this._placeholder},set:function(e){if(!(e instanceof HTMLElement)&&null!==e)throw new Error("A placeholder must be an html element or null.");this._placeholder=e},enumerable:!1,configurable:!0}),e.prototype.setData=function(e,t){if("string"!=typeof e)throw new Error("The key must be a string.");this._data.set(e,t)},e.prototype.getData=function(e){if("string"!=typeof e)throw new Error("The key must be a string.");return this._data.get(e)},e.prototype.deleteData=function(e){if("string"!=typeof e)throw new Error("The key must be a string.");return this._data.delete(e)},e}(),o=function(e){if(!(e instanceof HTMLElement))throw new Error("Please provide a sortable to the store function.");return n.has(e)||n.set(e,new r),n.get(e)};function a(e,t,n){if(e instanceof Array)for(var r=0;r<e.length;++r)a(e[r],t,n);else e.addEventListener(t,n),o(e).setData("event"+t,n)}function i(e,t){if(e instanceof Array)for(var n=0;n<e.length;++n)i(e[n],t);else e.removeEventListener(t,o(e).getData("event"+t)),o(e).deleteData("event"+t)}function l(e,t,n){if(e instanceof Array)for(var r=0;r<e.length;++r)l(e[r],t,n);else e.setAttribute(t,n)}function s(e,t){if(e instanceof Array)for(var n=0;n<e.length;++n)s(e[n],t);else e.removeAttribute(t)}var d=function(e){if(!e.parentElement||0===e.getClientRects().length)throw new Error("target element must be part of the dom");var t=e.getClientRects()[0];return{left:t.left+window.pageXOffset,right:t.right+window.pageXOffset,top:t.top+window.pageYOffset,bottom:t.bottom+window.pageYOffset}},c=function(e,t){if(!(e instanceof HTMLElement&&(t instanceof NodeList||t instanceof HTMLCollection||t instanceof Array)))throw new Error("You must provide an element and a list of elements.");return Array.from(t).indexOf(e)},f=function(e){if(!(e instanceof HTMLElement))throw new Error("Element is not a node element.");return null!==e.parentNode},u=function(e,t,n){if(!(e instanceof HTMLElement&&e.parentElement instanceof HTMLElement))throw new Error("target and element must be a node");e.parentElement.insertBefore(t,"before"===n?e:e.nextElementSibling)},p=function(e){if(!(e instanceof HTMLElement))throw new Error("You must provide a valid dom element");var t=window.getComputedStyle(e);return"border-box"===t.getPropertyValue("box-sizing")?parseInt(t.getPropertyValue("height"),10):["height","padding-top","padding-bottom"].map((function(e){var n=parseInt(t.getPropertyValue(e),10);return isNaN(n)?0:n})).reduce((function(e,t){return e+t}))},m=function(e){if(!(e instanceof HTMLElement))throw new Error("You must provide a valid dom element");var t=window.getComputedStyle(e);return["width","padding-left","padding-right"].map((function(e){var n=parseInt(t.getPropertyValue(e),10);return isNaN(n)?0:n})).reduce((function(e,t){return e+t}))},g=function(e,t){if(!(e instanceof Array))throw new Error("You must provide a Array of HTMLElements to be filtered.");return"string"!=typeof t?e:e.filter((function(e){return e.querySelector(t)instanceof HTMLElement||e.shadowRoot&&e.shadowRoot.querySelector(t)instanceof HTMLElement})).map((function(e){return e.querySelector(t)||e.shadowRoot&&e.shadowRoot.querySelector(t)}))},h=function(e){return e.composedPath&&e.composedPath()[0]||e.target},v=function(e,t,n){return{element:e,posX:n.pageX-t.left,posY:n.pageY-t.top}},y=function(e,t){if(!0===e.isSortable){var n=o(e).getConfig("acceptFrom");if(null!==n&&!1!==n&&"string"!=typeof n)throw new Error('HTML5Sortable: Wrong argument, "acceptFrom" must be "null", "false", or a valid selector string.');if(null!==n)return!1!==n&&n.split(",").filter((function(e){return e.length>0&&t.matches(e)})).length>0;if(e===t)return!0;if(void 0!==o(e).getConfig("connectWith")&&null!==o(e).getConfig("connectWith"))return o(e).getConfig("connectWith")===o(t).getConfig("connectWith")}return!1},E={items:null,connectWith:null,disableIEFix:null,acceptFrom:null,copy:!1,placeholder:null,placeholderClass:"sortable-placeholder",draggingClass:"sortable-dragging",hoverClass:!1,dropTargetContainerClass:!1,debounce:0,throttleTime:100,maxItems:0,itemSerializer:void 0,containerSerializer:void 0,customDragImage:null,orientation:"vertical"};var w,b,T,C,L,x,D,M,H,I=function(e,n){if("string"==typeof o(e).getConfig("hoverClass")){var r=o(e).getConfig("hoverClass").split(" ");!0===n?(a(e,"mousemove",function(e,t){var n=this;if(void 0===t&&(t=250),"function"!=typeof e)throw new Error("You must provide a function as the first argument for throttle.");if("number"!=typeof t)throw new Error("You must provide a number as the second argument for throttle.");var r=null;return function(){for(var o=[],a=0;a<arguments.length;a++)o[a]=arguments[a];var i=Date.now();(null===r||i-r>=t)&&(r=i,e.apply(n,o))}}((function(n){0===n.buttons&&t(e.children,o(e).getConfig("items")).forEach((function(e){var t,o;e===n.target||e.contains(n.target)?(t=e.classList).add.apply(t,r):(o=e.classList).remove.apply(o,r)}))}),o(e).getConfig("throttleTime"))),a(e,"mouseleave",(function(){t(e.children,o(e).getConfig("items")).forEach((function(e){var t;(t=e.classList).remove.apply(t,r)}))}))):(i(e,"mousemove"),i(e,"mouseleave"))}},A=function(e){i(e,"dragstart"),i(e,"dragend"),i(e,"dragover"),i(e,"dragenter"),i(e,"drop"),i(e,"mouseenter"),i(e,"mouseleave")},S=function(e,t){e&&i(e,"dragleave"),t&&t!==e&&i(t,"dragleave")},Y=function(e){var t;(t=e).h5s&&delete t.h5s.data,s(e,"aria-dropeffect")},_=function(e){s(e,"aria-grabbed"),s(e,"aria-copied"),s(e,"draggable"),s(e,"role")};function O(e,t){if(t.composedPath)return t.composedPath().find((function(e){return e.isSortable}));for(;!0!==e.isSortable;)e=e.parentElement;return e}function P(n,r){var o=e(n,"opts"),a=t(n.children,o.items).filter((function(e){return e.contains(r)||e.shadowRoot&&e.shadowRoot.contains(r)}));return a.length>0?a[0]:r}var z=function(n){var r=e(n,"opts"),o=t(n.children,r.items),i=g(o,r.handle);(l(n,"aria-dropeffect","move"),e(n,"_disabled","false"),l(i,"draggable","true"),I(n,!0),!1===r.disableIEFix)&&("function"==typeof(document||window.document).createElement("span").dragDrop&&a(i,"mousedown",(function(){if(-1!==o.indexOf(this))this.dragDrop();else{for(var e=this.parentElement;-1===o.indexOf(e);)e=e.parentElement;e.dragDrop()}})))};function W(r,s){var I=String(s);return s=s||{},"string"==typeof r&&(r=document.querySelectorAll(r)),r instanceof HTMLElement&&(r=[r]),r=Array.prototype.slice.call(r),/serialize/.test(I)?r.map((function(n){var r=e(n,"opts");return function(n,r,o){if(void 0===r&&(r=function(e,t){return e}),void 0===o&&(o=function(e){return e}),!(n instanceof HTMLElement)||1==!n.isSortable)throw new Error("You need to provide a sortableContainer to be serialized.");if("function"!=typeof r||"function"!=typeof o)throw new Error("You need to provide a valid serializer for items and the container.");var a=e(n,"opts").items,i=t(n.children,a),l=i.map((function(e){return{parent:n,node:e,html:e.outerHTML,index:c(e,i)}}));return{container:o({node:n,itemCount:l.length}),items:l.map((function(e){return r(e,n)}))}}(n,r.itemSerializer,r.containerSerializer)})):(r.forEach((function(r){if(/enable|disable|destroy/.test(I))return W[I](r);["connectWith","disableIEFix"].forEach((function(e){Object.prototype.hasOwnProperty.call(s,e)&&null!==s[e]&&console.warn('HTML5Sortable: You are using the deprecated configuration "'+e+'". This will be removed in an upcoming version, make sure to migrate to the new options when updating.')})),s=Object.assign({},E,o(r).config,s),o(r).config=s,e(r,"opts",s),r.isSortable=!0,function(n){var r=e(n,"opts"),o=t(n.children,r.items),a=g(o,r.handle);e(n,"_disabled","false"),A(o),S(C,M),i(a,"mousedown"),i(n,"dragover"),i(n,"dragenter"),i(n,"drop")}(r);var Y,_=t(r.children,s.items);if(null!==s.placeholder&&void 0!==s.placeholder){var N=document.createElement(r.tagName);s.placeholder instanceof HTMLElement?N.appendChild(s.placeholder):N.innerHTML=s.placeholder,Y=N.children[0]}o(r).placeholder=function(e,t,n){var r;if(void 0===n&&(n="sortable-placeholder"),!(e instanceof HTMLElement))throw new Error("You must provide a valid element as a sortable.");if(!(t instanceof HTMLElement)&&void 0!==t)throw new Error("You must provide a valid element as a placeholder or set ot to undefined.");return void 0===t&&(["UL","OL"].includes(e.tagName)?t=document.createElement("li"):["TABLE","TBODY"].includes(e.tagName)?(t=document.createElement("tr")).innerHTML='<td colspan="100"></td>':t=document.createElement("div")),"string"==typeof n&&(r=t.classList).add.apply(r,n.split(" ")),t}(r,Y,s.placeholderClass),e(r,"items",s.items),s.acceptFrom?e(r,"acceptFrom",s.acceptFrom):s.connectWith&&e(r,"connectWith",s.connectWith),z(r),l(_,"role","option"),l(_,"aria-grabbed","false"),a(r,"dragstart",(function(e){var n=h(e);if(!0!==n.isSortable&&(e.stopImmediatePropagation(),(!s.handle||n.matches(s.handle))&&"false"!==n.getAttribute("draggable"))){var r=O(n,e),a=P(r,n);D=t(r.children,s.items),L=D.indexOf(a),x=c(a,r.children),C=r,function(e,t,n){if(!(e instanceof Event))throw new Error("setDragImage requires a DragEvent as the first argument.");if(!(t instanceof HTMLElement))throw new Error("setDragImage requires the dragged element as the second argument.");if(n||(n=v),e.dataTransfer&&e.dataTransfer.setDragImage){var r=n(t,d(t),e);if(!(r.element instanceof HTMLElement)||"number"!=typeof r.posX||"number"!=typeof r.posY)throw new Error("The customDragImage function you provided must return and object with the properties element[string], posX[integer], posY[integer].");e.dataTransfer.effectAllowed="copyMove",e.dataTransfer.setData("text/plain",h(e).id),e.dataTransfer.setDragImage(r.element,r.posX,r.posY)}}(e,a,s.customDragImage),b=p(a),T=m(a),a.classList.add(s.draggingClass),w=function(e,t){var n=e;return!0===o(t).getConfig("copy")&&(l(n=e.cloneNode(!0),"aria-copied","true"),e.parentElement.appendChild(n),n.style.display="none",n.oldDisplay=e.style.display),n}(a,r),l(w,"aria-grabbed","true"),r.dispatchEvent(new CustomEvent("sortstart",{detail:{origin:{elementIndex:x,index:L,container:C},item:w,originalTarget:n}}))}})),a(r,"dragenter",(function(n){var i=h(n),l=O(i,n);l&&l!==M&&(H=t(l.children,e(l,"items")).filter((function(e){return e!==o(r).placeholder})),s.dropTargetContainerClass&&l.classList.add(s.dropTargetContainerClass),l.dispatchEvent(new CustomEvent("sortenter",{detail:{origin:{elementIndex:x,index:L,container:C},destination:{container:l,itemsBeforeUpdate:H},item:w,originalTarget:i}})),a(l,"dragleave",(function(e){var t=e.relatedTarget||e.fromElement;e.currentTarget.contains(t)||(s.dropTargetContainerClass&&l.classList.remove(s.dropTargetContainerClass),l.dispatchEvent(new CustomEvent("sortleave",{detail:{origin:{elementIndex:x,index:L,container:l},item:w,originalTarget:i}})))}))),M=l})),a(r,"dragend",(function(t){if(w){w.classList.remove(s.draggingClass),l(w,"aria-grabbed","false"),"true"===w.getAttribute("aria-copied")&&"true"!==e(w,"dropped")&&w.remove(),void 0!==w.oldDisplay&&(w.style.display=w.oldDisplay,delete w.oldDisplay);var o=Array.from(n.values()).map((function(e){return e.placeholder})).filter((function(e){return e instanceof HTMLElement})).filter(f)[0];o&&o.remove(),r.dispatchEvent(new CustomEvent("sortstop",{detail:{origin:{elementIndex:x,index:L,container:C},item:w}})),M=null,w=null,b=null,T=null}})),a(r,"drop",(function(a){if(y(r,w.parentElement)){a.preventDefault(),a.stopPropagation(),e(w,"dropped","true");var i=Array.from(n.values()).map((function(e){return e.placeholder})).filter((function(e){return e instanceof HTMLElement})).filter(f)[0];if(i){i.replaceWith(w),void 0!==w.oldDisplay&&(w.style.display=w.oldDisplay,delete w.oldDisplay),r.dispatchEvent(new CustomEvent("sortstop",{detail:{origin:{elementIndex:x,index:L,container:C},item:w}}));var l=o(r).placeholder,d=t(C.children,s.items).filter((function(e){return e!==l})),u=!0===this.isSortable?this:this.parentElement,p=t(u.children,e(u,"items")).filter((function(e){return e!==l})),m=c(w,Array.from(w.parentElement.children).filter((function(e){return e!==l}))),g=c(w,p);s.dropTargetContainerClass&&u.classList.remove(s.dropTargetContainerClass),x===m&&C===u||r.dispatchEvent(new CustomEvent("sortupdate",{detail:{origin:{elementIndex:x,index:L,container:C,itemsBeforeUpdate:D,items:d},destination:{index:g,elementIndex:m,container:u,itemsBeforeUpdate:H,items:p},item:w}}))}else e(w,"dropped","false")}}));var j,F,q,R=(j=function(e,r,a,i){if(w)if(s.forcePlaceholderSize&&(o(e).placeholder.style.height=b+"px",o(e).placeholder.style.width=T+"px"),Array.from(e.children).indexOf(r)>-1){var l=p(r),f=m(r),g=c(o(e).placeholder,r.parentElement.children),h=c(r,r.parentElement.children);if(l>b||f>T){var v=l-b,y=f-T,E=d(r).top,C=d(r).left;if(g<h&&("vertical"===s.orientation&&i<E||"horizontal"===s.orientation&&a<C))return;if(g>h&&("vertical"===s.orientation&&i>E+l-v||"horizontal"===s.orientation&&a>C+f-y))return}void 0===w.oldDisplay&&(w.oldDisplay=w.style.display),"none"!==w.style.display&&(w.style.display="none");var L=!1;try{var x=d(r).top+r.offsetHeight/2,D=d(r).left+r.offsetWidth/2;L="vertical"===s.orientation&&i>=x||"horizontal"===s.orientation&&a>=D}catch(e){L=g<h}L?function(e,t){u(e,t,"after")}(r,o(e).placeholder):function(e,t){u(e,t,"before")}(r,o(e).placeholder),Array.from(n.values()).filter((function(e){return void 0!==e.placeholder})).forEach((function(t){t.placeholder!==o(e).placeholder&&t.placeholder.remove()}))}else{var M=Array.from(n.values()).filter((function(e){return void 0!==e.placeholder})).map((function(e){return e.placeholder}));-1!==M.indexOf(r)||e!==r||t(r.children,s.items).length||(M.forEach((function(e){return e.remove()})),r.appendChild(o(e).placeholder))}},void 0===(F=s.debounce)&&(F=0),function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];clearTimeout(q),q=setTimeout((function(){j.apply(void 0,e)}),F)}),X=function(n){var r=n.target,a=!0===r.isSortable?r:O(r,n);if(r=P(a,r),w&&y(a,w.parentElement)&&"true"!==e(a,"_disabled")){var i=e(a,"opts");parseInt(i.maxItems)&&t(a.children,e(a,"items")).length>parseInt(i.maxItems)&&w.parentElement!==a||(n.preventDefault(),n.stopPropagation(),n.dataTransfer.dropEffect=!0===o(a).getConfig("copy")?"copy":"move",R(a,r,n.pageX,n.pageY))}};a(_.concat(r),"dragover",X),a(_.concat(r),"dragenter",X)})),r)}return W.destroy=function(n){!function(n){var r=e(n,"opts")||{},o=t(n.children,r.items),a=g(o,r.handle);I(n,!1),i(n,"dragover"),i(n,"dragenter"),i(n,"dragstart"),i(n,"dragend"),i(n,"drop"),Y(n),i(a,"mousedown"),A(o),_(o),S(C,M),n.isSortable=!1}(n)},W.enable=function(e){z(e)},W.disable=function(n){!function(n){var r=e(n,"opts"),o=t(n.children,r.items),a=g(o,r.handle);l(n,"aria-dropeffect","none"),e(n,"_disabled","true"),l(a,"draggable","false"),i(a,"mousedown"),I(n,!1)}(n)},W.__testing={data:e,removeItemEvents:A,removeItemData:_,removeSortableData:Y,removeContainerEvents:S},W}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
