/**
 * Block: Columns
 */

.wp-block-columns {
	display: flex;
	flex-wrap: wrap;
	gap: calc( 1.5 * var(--wp--style--block-gap) );

	@include padding-for-has-background();

	&:where(.has-background) {
		@include stretch-alignfull();
	}

	// Vertical alignment (CORE FEATURES)
	&.are-vertically-aligned {
		&-top {
			align-items: flex-start;
		}

		&-center {
			align-items: center;
		}

		&-bottom {
			align-items: flex-end;
		}
	}

	&.is-not-stacked-on-mobile {
		flex-wrap: nowrap;
	}

	@media screen and ( min-width: $breakpoint-tablet ) {
		flex-wrap: nowrap;
	}
}

/**
 * Block: Column
 */

.wp-block-column {
	flex-grow: 1; // Column with unspecified width will fill the blank space
	flex-basis: 0;

	@include padding-for-has-background();

	// > * {
	// 	margin-top: var(--wp--style--block-gap);
	// 	margin-bottom: var(--wp--style--block-gap);
	
	// 	@include remove-margin-top-for-first-child();
	// 	@include remove-margin-bottom-for-last-child();
	// }

	&[style*="flex-basis"] {
		flex-grow: 0; // Disable grow if specific column's width is set
	}

	// Vertical alignment (CORE FEATURES)
	&.is-vertically-aligned {
		&-top {
			align-self: flex-start;
		}

		&-center {
			align-self: center;
		}

		&-bottom {
			align-self: flex-end;
		}
	}
}

:where(.wp-block-columns):not(.is-not-stacked-on-mobile) > :where(.wp-block-column) {
	@media screen and ( max-width: ( $breakpoint-phone - 1px ) ) {
		flex-basis: 100% !important; // Use !important because we need to override the inline style of column width generated by WordPress
	}

	@media screen and ( min-width: $breakpoint-phone ) and ( max-width: ( $breakpoint-tablet - 1px ) ) {
		&:not(:only-child) {
			flex-basis: calc(50% - calc(var(--wp--style--block-gap, 2em) / 2)) !important;
			flex-grow: 0;
		}
	}
}